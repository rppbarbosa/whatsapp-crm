require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
  console.error('‚ùå Supabase n√£o configurado. Configure SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY no .env');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

async function fixEmailConfirmation() {
  console.log('üîß CORRIGINDO PROBLEMA DE CONFIRMA√á√ÉO DE EMAIL');
  console.log('==============================================');
  
  try {
    // 1. Listar usu√°rios n√£o confirmados
    console.log('üë§ Verificando usu√°rios n√£o confirmados...');
    const { data: users, error: usersError } = await supabase.auth.admin.listUsers();
    
    if (usersError) {
      console.error('‚ùå Erro ao listar usu√°rios:', usersError);
      return;
    }

    const unconfirmedUsers = users.users.filter(user => !user.email_confirmed_at);
    console.log(`üìß Encontrados ${unconfirmedUsers.length} usu√°rios n√£o confirmados`);

    if (unconfirmedUsers.length > 0) {
      console.log('\nüîì Confirmando usu√°rios automaticamente...');
      
      for (const user of unconfirmedUsers) {
        console.log(`  - Confirmando ${user.email}...`);
        
        // Confirmar email do usu√°rio
        const { error: confirmError } = await supabase.auth.admin.updateUserById(user.id, {
          email_confirm: true
        });

        if (confirmError) {
          console.error(`    ‚ùå Erro ao confirmar ${user.email}:`, confirmError.message);
        } else {
          console.log(`    ‚úÖ ${user.email} confirmado com sucesso`);
        }
      }
    }

    // 2. Verificar se h√° usu√°rios n√£o confirmados restantes
    console.log('\nüîç Verificando usu√°rios restantes...');
    const { data: updatedUsers, error: updatedUsersError } = await supabase.auth.admin.listUsers();
    
    if (updatedUsersError) {
      console.error('‚ùå Erro ao verificar usu√°rios atualizados:', updatedUsersError);
    } else {
      const stillUnconfirmed = updatedUsers.users.filter(user => !user.email_confirmed_at);
      console.log(`üìß Usu√°rios ainda n√£o confirmados: ${stillUnconfirmed.length}`);
      
      if (stillUnconfirmed.length === 0) {
        console.log('üéâ Todos os usu√°rios foram confirmados!');
      }
    }

    // 3. Testar cria√ß√£o de novo usu√°rio
    console.log('\nüß™ Testando cria√ß√£o de novo usu√°rio...');
    const testEmail = `teste-${Date.now()}@exemplo.com`;
    
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: '123456',
      options: {
        data: {
          full_name: 'Usu√°rio Teste'
        }
      }
    });

    if (signUpError) {
      console.error('‚ùå Erro ao criar usu√°rio de teste:', signUpError);
    } else {
      console.log('‚úÖ Usu√°rio de teste criado:', {
        id: signUpData.user?.id,
        email: signUpData.user?.email,
        email_confirmed: signUpData.user?.email_confirmed_at ? 'Sim' : 'N√£o'
      });
      
      // Confirmar automaticamente o usu√°rio de teste
      if (signUpData.user?.id) {
        console.log('üîì Confirmando usu√°rio de teste automaticamente...');
        const { error: confirmError } = await supabase.auth.admin.updateUserById(signUpData.user.id, {
          email_confirm: true
        });

        if (confirmError) {
          console.error('‚ùå Erro ao confirmar usu√°rio de teste:', confirmError.message);
        } else {
          console.log('‚úÖ Usu√°rio de teste confirmado automaticamente');
        }
        
        // Limpar usu√°rio de teste
        console.log('üßπ Limpando usu√°rio de teste...');
        const { error: deleteError } = await supabase.auth.admin.deleteUser(signUpData.user.id);
        if (deleteError) {
          console.log('‚ö†Ô∏è N√£o foi poss√≠vel deletar usu√°rio de teste:', deleteError.message);
        } else {
          console.log('‚úÖ Usu√°rio de teste removido');
        }
      }
    }

    console.log('\nüéØ PR√ìXIMOS PASSOS:');
    console.log('===================');
    console.log('1. Acesse o painel do Supabase: https://supabase.com/dashboard');
    console.log('2. V√° em Authentication > Settings');
    console.log('3. Desabilite "Enable email confirmations"');
    console.log('4. Isso evitar√° o problema no futuro');
    console.log('');
    console.log('‚úÖ PROBLEMA RESOLVIDO!');
    console.log('   Agora os usu√°rios podem fazer login sem confirma√ß√£o de email.');

  } catch (err) {
    console.error('‚ùå Erro inesperado:', err);
  }
}

fixEmailConfirmation();
