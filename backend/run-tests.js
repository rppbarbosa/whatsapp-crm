#!/usr/bin/env node

const { testSupabaseConnection } = require('./test-supabase-connection');
const { testServerBasic } = require('./test-server-basic');
const { runAllTests } = require('./test-user-project-apis');

async function runAllBackendTests() {
  console.log('üß™ EXECUTANDO TODOS OS TESTES DO BACKEND');
  console.log('='.repeat(60));
  console.log('üìÖ Data:', new Date().toLocaleString('pt-BR'));
  console.log('='.repeat(60));

  const results = {
    supabase: false,
    server: false,
    apis: false
  };

  try {
    // Teste 1: Conex√£o com Supabase
    console.log('\nüóÑÔ∏è TESTE 1: CONEX√ÉO COM SUPABASE');
    console.log('-'.repeat(40));
    try {
      await testSupabaseConnection();
      results.supabase = true;
      console.log('‚úÖ Teste de Supabase conclu√≠do');
    } catch (error) {
      console.error('‚ùå Falha no teste de Supabase:', error.message);
    }

    // Teste 2: Servidor b√°sico
    console.log('\nüåê TESTE 2: SERVIDOR B√ÅSICO');
    console.log('-'.repeat(40));
    try {
      await testServerBasic();
      results.server = true;
      console.log('‚úÖ Teste de servidor conclu√≠do');
    } catch (error) {
      console.error('‚ùå Falha no teste de servidor:', error.message);
    }

    // Teste 3: APIs completas (apenas se servidor estiver funcionando)
    if (results.server) {
      console.log('\nüîó TESTE 3: APIs COMPLETAS');
      console.log('-'.repeat(40));
      try {
        await runAllTests();
        results.apis = true;
        console.log('‚úÖ Teste de APIs conclu√≠do');
      } catch (error) {
        console.error('‚ùå Falha no teste de APIs:', error.message);
      }
    } else {
      console.log('\n‚è≠Ô∏è  PULANDO TESTE DE APIs (servidor n√£o est√° funcionando)');
    }

    // Relat√≥rio final
    console.log('\nüìä RELAT√ìRIO FINAL');
    console.log('='.repeat(60));
    
    const testNames = {
      supabase: 'Conex√£o Supabase',
      server: 'Servidor B√°sico',
      apis: 'APIs Completas'
    };

    Object.entries(results).forEach(([test, passed]) => {
      const status = passed ? '‚úÖ PASSOU' : '‚ùå FALHOU';
      console.log(`${testNames[test].padEnd(20)}: ${status}`);
    });

    const totalTests = Object.keys(results).length;
    const passedTests = Object.values(results).filter(Boolean).length;
    const successRate = ((passedTests / totalTests) * 100).toFixed(1);

    console.log('='.repeat(60));
    console.log(`üìà Taxa de Sucesso: ${passedTests}/${totalTests} (${successRate}%)`);
    
    if (passedTests === totalTests) {
      console.log('üéâ TODOS OS TESTES PASSARAM!');
      console.log('‚úÖ Backend est√° pronto para uso');
    } else if (results.supabase && results.server) {
      console.log('‚ö†Ô∏è  TESTES B√ÅSICOS PASSARAM');
      console.log('‚úÖ Backend est√° funcionando, mas APIs podem ter problemas');
    } else if (results.supabase) {
      console.log('‚ö†Ô∏è  APENAS SUPABASE EST√Å FUNCIONANDO');
      console.log('‚ùå Servidor n√£o est√° rodando - execute: npm start');
    } else {
      console.log('‚ùå PROBLEMAS CR√çTICOS DETECTADOS');
      console.log('üîß Verifique a configura√ß√£o do Supabase e servidor');
    }

    console.log('\nüí° PR√ìXIMOS PASSOS:');
    if (!results.supabase) {
      console.log('1. Configure as vari√°veis de ambiente do Supabase');
      console.log('2. Execute o schema no Supabase');
    }
    if (!results.server) {
      console.log('1. Execute: npm start no diret√≥rio backend');
      console.log('2. Verifique se a porta 3001 est√° livre');
    }
    if (results.supabase && results.server && !results.apis) {
      console.log('1. Verifique os logs do servidor para erros');
      console.log('2. Teste as APIs individualmente');
    }
    if (results.supabase && results.server && results.apis) {
      console.log('1. Integre o frontend com as APIs');
      console.log('2. Teste o sistema completo');
    }

  } catch (error) {
    console.error('\nüí• ERRO CR√çTICO DURANTE OS TESTES:');
    console.error('Erro:', error.message);
    console.error('Stack:', error.stack);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  runAllBackendTests().catch(console.error);
}

module.exports = { runAllBackendTests };
