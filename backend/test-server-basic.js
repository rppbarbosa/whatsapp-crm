const axios = require('axios');
require('dotenv').config();

// Configura√ß√£o
const BASE_URL = process.env.BACKEND_URL || 'http://localhost:3001';

async function testServerBasic() {
  console.log('üß™ TESTE B√ÅSICO DO SERVIDOR');
  console.log('='.repeat(40));
  console.log(`üåê URL: ${BASE_URL}`);
  console.log('='.repeat(40));

  try {
    // Teste 1: Health Check
    console.log('\n1Ô∏è‚É£ Testando Health Check...');
    const healthResponse = await axios.get(`${BASE_URL}/health`, { timeout: 5000 });
    console.log(`‚úÖ Status: ${healthResponse.status}`);
    console.log(`üìä Data:`, healthResponse.data);

    // Teste 2: Informa√ß√µes da API
    console.log('\n2Ô∏è‚É£ Testando Informa√ß√µes da API...');
    const infoResponse = await axios.get(`${BASE_URL}/`, { timeout: 5000 });
    console.log(`‚úÖ Status: ${infoResponse.status}`);
    console.log(`üìã Endpoints dispon√≠veis:`, infoResponse.data.endpoints);

    // Teste 3: Verificar se as rotas de usu√°rios est√£o registradas
    console.log('\n3Ô∏è‚É£ Testando Rota de Usu√°rios...');
    try {
      const userResponse = await axios.get(`${BASE_URL}/api/users/profile`, { 
        timeout: 5000,
        headers: {
          'Authorization': 'Bearer mock-token'
        }
      });
      console.log(`‚úÖ Rota de usu√°rios est√° funcionando`);
    } catch (userError) {
      if (userError.response?.status === 401) {
        console.log(`‚úÖ Rota de usu√°rios est√° funcionando (retornou 401 - esperado sem token v√°lido)`);
      } else {
        console.log(`‚ö†Ô∏è  Rota de usu√°rios retornou: ${userError.response?.status || 'ERRO'}`);
      }
    }

    console.log('\nüéâ TESTE B√ÅSICO CONCLU√çDO COM SUCESSO!');
    console.log('‚úÖ Servidor est√° funcionando');
    console.log('‚úÖ Rotas est√£o registradas');
    console.log('‚úÖ Pronto para testes mais avan√ßados');

  } catch (error) {
    console.error('\n‚ùå ERRO NO TESTE B√ÅSICO:');
    
    if (error.code === 'ECONNREFUSED') {
      console.error('üîå Servidor n√£o est√° rodando!');
      console.error('üí° Execute: npm start no diret√≥rio backend');
    } else if (error.code === 'ENOTFOUND') {
      console.error('üåê URL inv√°lida ou servidor n√£o acess√≠vel');
    } else if (error.code === 'ECONNABORTED') {
      console.error('‚è±Ô∏è  Timeout - servidor pode estar lento');
    } else {
      console.error('üí• Erro inesperado:', error.message);
    }
    
    console.error('\nüîß SOLU√á√ïES:');
    console.error('1. Verifique se o servidor est√° rodando: npm start');
    console.error('2. Verifique a URL: http://localhost:3001');
    console.error('3. Verifique se a porta 3001 est√° livre');
    console.error('4. Verifique os logs do servidor para erros');
  }
}

// Executar teste
if (require.main === module) {
  testServerBasic().catch(console.error);
}

module.exports = { testServerBasic };
