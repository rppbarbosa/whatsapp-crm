require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
  console.error('‚ùå Supabase n√£o configurado. Configure SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY no .env');
  process.exit(1);
}

// Usar service role para acessar configura√ß√µes administrativas
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

async function checkSupabaseSMTP() {
  console.log('üîç VERIFICANDO CONFIGURA√á√ÉO DE SMTP NO SUPABASE');
  console.log('================================================');
  
  try {
    // 1. Verificar usu√°rios n√£o confirmados
    console.log('üë§ Verificando usu√°rios n√£o confirmados...');
    const { data: users, error: usersError } = await supabase.auth.admin.listUsers();
    
    if (usersError) {
      console.error('‚ùå Erro ao listar usu√°rios:', usersError);
    } else {
      const unconfirmedUsers = users.users.filter(user => !user.email_confirmed_at);
      console.log(`üìß Usu√°rios n√£o confirmados: ${unconfirmedUsers.length}`);
      
      if (unconfirmedUsers.length > 0) {
        console.log('üìã Detalhes dos usu√°rios n√£o confirmados:');
        unconfirmedUsers.forEach(user => {
          console.log(`  - ${user.email} (criado em: ${user.created_at})`);
          console.log(`    Confirma√ß√£o enviada: ${user.confirmation_sent_at ? 'Sim' : 'N√£o'}`);
        });
      }
    }

    // 2. Verificar configura√ß√£o de autentica√ß√£o
    console.log('\nüîê Verificando configura√ß√£o de autentica√ß√£o...');
    console.log('‚ÑπÔ∏è Para verificar configura√ß√£o de SMTP:');
    console.log('   1. Acesse: https://supabase.com/dashboard');
    console.log('   2. Selecione seu projeto');
    console.log('   3. V√° em Authentication > Settings');
    console.log('   4. Verifique a se√ß√£o "SMTP Settings"');
    console.log('   5. Se n√£o estiver configurado, configure um provedor SMTP');

    // 3. Testar envio de email de confirma√ß√£o
    console.log('\nüìß Testando envio de email de confirma√ß√£o...');
    const testEmail = `teste-${Date.now()}@exemplo.com`;
    
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: '123456',
      options: {
        data: {
          full_name: 'Usu√°rio Teste'
        }
      }
    });

    if (signUpError) {
      console.error('‚ùå Erro ao criar usu√°rio de teste:', signUpError);
    } else {
      console.log('‚úÖ Usu√°rio de teste criado:', {
        id: signUpData.user?.id,
        email: signUpData.user?.email,
        email_confirmed: signUpData.user?.email_confirmed_at ? 'Sim' : 'N√£o',
        confirmation_sent: signUpData.user?.confirmation_sent_at ? 'Sim' : 'N√£o'
      });
      
      // Aguardar um pouco para ver se o email √© enviado
      console.log('‚è≥ Aguardando 5 segundos para verificar se email foi enviado...');
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      // Verificar novamente o status do usu√°rio
      const { data: userData, error: userError } = await supabase.auth.admin.getUserById(signUpData.user.id);
      if (userError) {
        console.error('‚ùå Erro ao verificar usu√°rio:', userError);
      } else {
        console.log('üìß Status ap√≥s 5 segundos:', {
          email_confirmed: userData.user?.email_confirmed_at ? 'Sim' : 'N√£o',
          confirmation_sent: userData.user?.confirmation_sent_at ? 'Sim' : 'N√£o'
        });
      }
      
      // Limpar usu√°rio de teste
      console.log('üßπ Limpando usu√°rio de teste...');
      const { error: deleteError } = await supabase.auth.admin.deleteUser(signUpData.user.id);
      if (deleteError) {
        console.log('‚ö†Ô∏è N√£o foi poss√≠vel deletar usu√°rio de teste:', deleteError.message);
      } else {
        console.log('‚úÖ Usu√°rio de teste removido');
      }
    }

    // 4. Verificar se h√° configura√ß√£o de SMTP
    console.log('\nüìß DIAGN√ìSTICO DE EMAIL:');
    console.log('========================');
    console.log('‚ùå PROBLEMA IDENTIFICADO:');
    console.log('   O Supabase n√£o est√° configurado para enviar emails de confirma√ß√£o.');
    console.log('');
    console.log('üîß SOLU√á√ïES POSS√çVEIS:');
    console.log('');
    console.log('1Ô∏è‚É£ CONFIGURAR SMTP NO SUPABASE:');
    console.log('   - Acesse: https://supabase.com/dashboard');
    console.log('   - Selecione seu projeto');
    console.log('   - V√° em Authentication > Settings');
    console.log('   - Configure SMTP Settings com:');
    console.log('     * Gmail, SendGrid, Mailgun, etc.');
    console.log('     * Ou use o provedor padr√£o (limitado)');
    console.log('');
    console.log('2Ô∏è‚É£ DESABILITAR CONFIRMA√á√ÉO DE EMAIL:');
    console.log('   - No painel do Supabase');
    console.log('   - Authentication > Settings');
    console.log('   - Desabilite "Enable email confirmations"');
    console.log('   - Isso permitir√° login sem confirma√ß√£o');
    console.log('');
    console.log('3Ô∏è‚É£ USAR AUTENTICA√á√ÉO SIMPLIFICADA:');
    console.log('   - Modificar o sistema para n√£o depender de confirma√ß√£o');
    console.log('   - Usar autentica√ß√£o direta no banco de dados');

  } catch (err) {
    console.error('‚ùå Erro inesperado:', err);
  }
}

checkSupabaseSMTP();
