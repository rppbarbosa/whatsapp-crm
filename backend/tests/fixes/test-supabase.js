const { supabase, supabaseAdmin } = require('./src/services/supabase.js');

async function testSupabaseConnection() {
  console.log('üîç Testando conex√£o com Supabase...\n');

  try {
    // Teste 1: Conex√£o b√°sica
    console.log('1Ô∏è‚É£ Testando conex√£o b√°sica...');
    const { data, error } = await supabase.from('profiles').select('count').limit(1);
    
    if (error) {
      console.log('‚ùå Erro na conex√£o:', error.message);
      return;
    }
    
    console.log('‚úÖ Conex√£o estabelecida com sucesso!\n');

    // Teste 2: Verificar tabelas
    console.log('2Ô∏è‚É£ Verificando tabelas...');
    const tables = [
      'profiles',
      'leads', 
      'pipeline_activities',
      'customers',
      'conversations',
      'messages',
      'whatsapp_instances',
      'ai_configs',
      'auto_responses',
      'activity_logs',
      'metrics'
    ];

    for (const table of tables) {
      try {
        const { data, error } = await supabase.from(table).select('count').limit(1);
        if (error) {
          console.log(`‚ùå Tabela ${table}: ${error.message}`);
        } else {
          console.log(`‚úÖ Tabela ${table}: OK`);
        }
      } catch (err) {
        console.log(`‚ùå Tabela ${table}: ${err.message}`);
      }
    }

    console.log('\n3Ô∏è‚É£ Testando views...');
    const views = [
      'leads_dashboard',
      'conversations_with_lead', 
      'conversion_metrics'
    ];

    for (const view of views) {
      try {
        const { data, error } = await supabase.from(view).select('*').limit(1);
        if (error) {
          console.log(`‚ùå View ${view}: ${error.message}`);
        } else {
          console.log(`‚úÖ View ${view}: OK`);
        }
      } catch (err) {
        console.log(`‚ùå View ${view}: ${err.message}`);
      }
    }

    // Teste 4: Inserir dados de teste
    console.log('\n4Ô∏è‚É£ Testando inser√ß√£o de dados...');
    
    // Teste de inser√ß√£o de lead
    const testLead = {
      name: 'Teste Lead',
      email: 'teste@exemplo.com',
      phone: '(11) 99999-9999',
      company: 'Empresa Teste',
      source: 'website',
      status: 'lead-bruto',
      priority: 'medium'
    };

    const { data: leadData, error: leadError } = await supabase
      .from('leads')
      .insert(testLead)
      .select();

    if (leadError) {
      console.log('‚ùå Erro ao inserir lead:', leadError.message);
    } else {
      console.log('‚úÖ Lead inserido com sucesso:', leadData[0].id);
      
      // Limpar dados de teste
      await supabase.from('leads').delete().eq('email', 'teste@exemplo.com');
      console.log('üßπ Dados de teste removidos');
    }

    // Teste 5: Verificar configura√ß√µes de IA
    console.log('\n5Ô∏è‚É£ Verificando configura√ß√µes de IA...');
    const { data: aiConfigs, error: aiError } = await supabase
      .from('ai_configs')
      .select('*');

    if (aiError) {
      console.log('‚ùå Erro ao buscar configura√ß√µes de IA:', aiError.message);
    } else {
      console.log(`‚úÖ ${aiConfigs.length} configura√ß√£o(√µes) de IA encontrada(s)`);
    }

    // Teste 6: Verificar respostas autom√°ticas
    console.log('\n6Ô∏è‚É£ Verificando respostas autom√°ticas...');
    const { data: autoResponses, error: autoError } = await supabase
      .from('auto_responses')
      .select('*');

    if (autoError) {
      console.log('‚ùå Erro ao buscar respostas autom√°ticas:', autoError.message);
    } else {
      console.log(`‚úÖ ${autoResponses.length} resposta(s) autom√°tica(s) encontrada(s)`);
    }

    console.log('\nüéâ Todos os testes conclu√≠dos!');
    console.log('\nüìã Resumo:');
    console.log('- ‚úÖ Conex√£o com Supabase estabelecida');
    console.log('- ‚úÖ Tabelas criadas e funcionando');
    console.log('- ‚úÖ Views configuradas');
    console.log('- ‚úÖ Inser√ß√£o de dados funcionando');
    console.log('- ‚úÖ Configura√ß√µes iniciais carregadas');
    
    console.log('\nüöÄ Pr√≥ximos passos:');
    console.log('1. Integrar APIs do backend com Supabase');
    console.log('2. Conectar frontend com dados reais');
    console.log('3. Configurar webhooks do WhatsApp');
    console.log('4. Implementar autentica√ß√£o');

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
    console.log('\nüîß Verifique:');
    console.log('- Vari√°veis de ambiente configuradas');
    console.log('- Schema SQL executado no Supabase');
    console.log('- Projeto Supabase ativo');
  }
}

// Executar teste se chamado diretamente
if (require.main === module) {
  testSupabaseConnection();
}

module.exports = { testSupabaseConnection }; 