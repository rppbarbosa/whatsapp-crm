// ===== TESTE DO SISTEMA DE CACHE =====
// Execute este script para testar o sistema de cache de contatos

require('dotenv').config();
const evolutionApiService = require('./src/services/evolutionApi');
const whatsappService = require('./src/services/whatsappService');

async function testCacheSystem() {
  try {
    console.log('üß™ Testando sistema de cache de contatos...\n');
    
    // Verificar inst√¢ncias dispon√≠veis
    console.log('0Ô∏è‚É£ Verificando inst√¢ncias dispon√≠veis...');
    const instances = evolutionApiService.getInstances();
    console.log(`üì± Inst√¢ncias ativas: ${instances.length}`);
    
    if (instances.length === 0) {
      console.log('‚ùå Nenhuma inst√¢ncia ativa encontrada');
      console.log('üí° Certifique-se de que o servidor est√° rodando e h√° inst√¢ncias conectadas');
      return;
    }
    
    // Usar a primeira inst√¢ncia dispon√≠vel
    const instanceName = instances[0].instance.instanceName;
    console.log(`üîç Usando inst√¢ncia: ${instanceName}\n`);
    
    // 1. Verificar status inicial do cache
    console.log('1Ô∏è‚É£ Verificando status inicial do cache...');
    const initialCacheStatus = evolutionApiService.getCacheStatus(instanceName);
    console.log('Status inicial:', initialCacheStatus);
    console.log('');
    
    // 2. Tentar obter contatos (deve falhar se cliente n√£o estiver pronto)
    console.log('2Ô∏è‚É£ Tentando obter contatos...');
    try {
      const contacts = await evolutionApiService.getContacts(instanceName);
      console.log(`‚úÖ Contatos obtidos: ${contacts.length}`);
      console.log(`üìä Status do cache ap√≥s obten√ß√£o:`, evolutionApiService.getCacheStatus(instanceName));
    } catch (error) {
      console.log(`‚ùå Erro ao obter contatos: ${error.message}`);
      console.log(`üìä Status do cache ap√≥s erro:`, evolutionApiService.getCacheStatus(instanceName));
    }
    console.log('');
    
    // 3. Verificar se h√° cache dispon√≠vel
    console.log('3Ô∏è‚É£ Verificando se h√° cache dispon√≠vel...');
    const cacheStatus = evolutionApiService.getCacheStatus(instanceName);
    if (cacheStatus.hasCache) {
      console.log(`‚úÖ Cache dispon√≠vel com ${cacheStatus.contactsCount} contatos`);
      console.log(`üìÖ √öltima atualiza√ß√£o: ${cacheStatus.lastUpdate}`);
      console.log(`‚è∞ Expira em: ${cacheStatus.expiresAt}`);
    } else {
      console.log('‚ùå Nenhum cache dispon√≠vel');
    }
    console.log('');
    
    // 4. Testar sincroniza√ß√£o com cache
    console.log('4Ô∏è‚É£ Testando sincroniza√ß√£o com cache...');
    try {
      const syncedContacts = await whatsappService.syncContacts(instanceName, false);
      console.log(`‚úÖ Sincroniza√ß√£o conclu√≠da: ${syncedContacts.length} contatos`);
    } catch (error) {
      console.log(`‚ùå Erro na sincroniza√ß√£o: ${error.message}`);
    }
    console.log('');
    
    // 5. For√ßar atualiza√ß√£o do cache
    console.log('5Ô∏è‚É£ Testando for√ßar atualiza√ß√£o do cache...');
    try {
      const refreshedContacts = await evolutionApiService.forceRefreshContacts(instanceName);
      console.log(`‚úÖ Cache atualizado: ${refreshedContacts.length} contatos`);
      console.log(`üìä Status do cache ap√≥s atualiza√ß√£o:`, evolutionApiService.getCacheStatus(instanceName));
    } catch (error) {
      console.log(`‚ùå Erro ao for√ßar atualiza√ß√£o: ${error.message}`);
    }
    console.log('');
    
    // 6. Testar sincroniza√ß√£o com force refresh
    console.log('6Ô∏è‚É£ Testando sincroniza√ß√£o com force refresh...');
    try {
      const syncedContacts = await whatsappService.syncContacts(instanceName, true);
      console.log(`‚úÖ Sincroniza√ß√£o com force refresh: ${syncedContacts.length} contatos`);
    } catch (error) {
      console.log(`‚ùå Erro na sincroniza√ß√£o com force refresh: ${error.message}`);
    }
    console.log('');
    
    // 7. Verificar status final do cache
    console.log('7Ô∏è‚É£ Status final do cache...');
    const finalCacheStatus = evolutionApiService.getCacheStatus(instanceName);
    console.log('Status final:', finalCacheStatus);
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

// Executar o teste
testCacheSystem(); 