require('dotenv').config();
const axios = require('axios');

const API_BASE_URL = 'http://localhost:3001';
const API_KEY = 'whatsapp-crm-evolution-key-2024-secure';

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
    'apikey': API_KEY,
  },
});

async function debugInstanceIssue() {
  console.log('üîç Diagnosticando problema das inst√¢ncias...\n');

  try {
    // 1. Verificar se o backend est√° rodando
    console.log('1Ô∏è‚É£ Verificando se o backend est√° rodando...');
    try {
      const healthResponse = await api.get('/api/whatsapp/health');
      console.log('‚úÖ Backend est√° rodando:', healthResponse.data);
    } catch (error) {
      console.error('‚ùå Backend n√£o est√° rodando:', error.message);
      return;
    }

    // 2. Listar inst√¢ncias
    console.log('\n2Ô∏è‚É£ Listando inst√¢ncias...');
    const instancesResponse = await api.get('/api/whatsapp/instances');
    console.log('üìä Inst√¢ncias encontradas:', instancesResponse.data?.length || 0);
    
    instancesResponse.data.forEach((instance, index) => {
      console.log(`  ${index + 1}. ${instance.instance.instanceName}: ${instance.instance.status}`);
      console.log(`     Persistida: ${instance.persisted || false}`);
      console.log(`     QR Code: ${instance.instance.qrcode ? 'Sim' : 'N√£o'}`);
      console.log(`     Logs: ${instance.instance.logs?.length || 0}`);
    });

    // 3. Testar conex√£o da inst√¢ncia 'teste'
    console.log('\n3Ô∏è‚É£ Testando conex√£o da inst√¢ncia "teste"...');
    try {
      console.log('   Enviando requisi√ß√£o GET /api/whatsapp/instances/teste/connect...');
      const connectResponse = await api.get('/api/whatsapp/instances/teste/connect');
      console.log('‚úÖ Resposta da conex√£o:', connectResponse.data);
      
      if (connectResponse.data.qrcode) {
        console.log('üì± QR Code gerado com sucesso!');
      } else if (connectResponse.data.message) {
        console.log('üì± Mensagem:', connectResponse.data.message);
      }
    } catch (error) {
      console.error('‚ùå Erro ao conectar inst√¢ncia "teste":');
      console.error('   Status:', error.response?.status);
      console.error('   Mensagem:', error.response?.data?.message || error.message);
      console.error('   Erro:', error.response?.data?.error || 'Desconhecido');
    }

    // 4. Verificar logs do backend (se poss√≠vel)
    console.log('\n4Ô∏è‚É£ Verificando logs do backend...');
    console.log('   (Verifique o terminal onde o backend est√° rodando para ver os logs)');

    // 5. Sugest√µes de corre√ß√£o
    console.log('\n5Ô∏è‚É£ Sugest√µes de corre√ß√£o:');
    console.log('   - Verifique se o backend est√° rodando na porta 3001');
    console.log('   - Verifique os logs do backend para erros');
    console.log('   - Verifique se as vari√°veis de ambiente est√£o corretas');
    console.log('   - Tente reiniciar o backend');

  } catch (error) {
    console.error('‚ùå Erro durante o diagn√≥stico:', error.message);
  }
}

// Executar diagn√≥stico
debugInstanceIssue(); 