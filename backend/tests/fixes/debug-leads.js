require('dotenv').config();
const { supabase, supabaseAdmin } = require('./src/services/supabase.js');

async function debugLeads() {
  console.log('üîç Debug da tabela leads...\n');

  try {
    // 1. Verificar se h√° dados na tabela
    console.log('1Ô∏è‚É£ Verificando dados na tabela...');
    const { data: allData, error: allError } = await supabaseAdmin
      .from('leads')
      .select('*');

    if (allError) {
      console.log('‚ùå Erro ao buscar todos os leads:', allError.message);
      return;
    }

    console.log(`üìä Total de leads na tabela: ${allData.length}`);
    if (allData.length > 0) {
      console.log('üìã Primeiros leads:');
      allData.slice(0, 3).forEach((lead, index) => {
        console.log(`  ${index + 1}. ${lead.name} (${lead.email}) - ${lead.status}`);
      });
    }

    // 2. Testar com supabase (chave an√¥nima)
    console.log('\n2Ô∏è‚É£ Testando com chave an√¥nima...');
    const { data: anonData, error: anonError } = await supabase
      .from('leads')
      .select('*');

    if (anonError) {
      console.log('‚ùå Erro com chave an√¥nima:', anonError.message);
    } else {
      console.log(`‚úÖ Chave an√¥nima: ${anonData.length} leads encontrados`);
    }

    // 3. Testar com supabaseAdmin (service role)
    console.log('\n3Ô∏è‚É£ Testando com service role...');
    const { data: adminData, error: adminError } = await supabaseAdmin
      .from('leads')
      .select('*');

    if (adminError) {
      console.log('‚ùå Erro com service role:', adminError.message);
    } else {
      console.log(`‚úÖ Service role: ${adminData.length} leads encontrados`);
    }

    // 4. Verificar pol√≠ticas RLS
    console.log('\n4Ô∏è‚É£ Verificando pol√≠ticas RLS...');
    const { data: policies, error: policiesError } = await supabaseAdmin
      .rpc('get_policies', { table_name: 'leads' })
      .catch(() => ({ data: null, error: 'Fun√ß√£o n√£o dispon√≠vel' }));

    if (policiesError) {
      console.log('‚ÑπÔ∏è  N√£o foi poss√≠vel verificar pol√≠ticas RLS diretamente');
    } else {
      console.log('üìã Pol√≠ticas RLS encontradas:', policies);
    }

    // 5. Testar inser√ß√£o e leitura imediata
    console.log('\n5Ô∏è‚É£ Testando inser√ß√£o e leitura imediata...');
    const testLead = {
      name: 'Debug Test',
      email: 'debug@test.com',
      phone: '(11) 11111-1111',
      company: 'Debug Company',
      source: 'website',
      status: 'lead-bruto',
      priority: 'medium',
      notes: 'Lead para debug'
    };

    const { data: insertData, error: insertError } = await supabaseAdmin
      .from('leads')
      .insert(testLead)
      .select()
      .single();

    if (insertError) {
      console.log('‚ùå Erro ao inserir lead de debug:', insertError.message);
    } else {
      console.log('‚úÖ Lead de debug inserido:', insertData.id);

      // Tentar ler imediatamente
      const { data: readData, error: readError } = await supabaseAdmin
        .from('leads')
        .select('*')
        .eq('id', insertData.id)
        .single();

      if (readError) {
        console.log('‚ùå Erro ao ler lead rec√©m-inserido:', readError.message);
      } else {
        console.log('‚úÖ Lead rec√©m-inserido lido com sucesso:', readData.name);
      }

      // Limpar lead de debug
      await supabaseAdmin
        .from('leads')
        .delete()
        .eq('id', insertData.id);
      console.log('üßπ Lead de debug removido');
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  debugLeads();
}

module.exports = { debugLeads }; 