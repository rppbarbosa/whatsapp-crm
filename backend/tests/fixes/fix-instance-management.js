// ===== CORRIGIR GERENCIAMENTO DE INST√ÇNCIAS =====

require('dotenv').config();
const { supabaseAdmin } = require('./src/services/supabase');
const evolutionApiService = require('./src/services/evolutionApi');

async function fixInstanceManagement() {
  try {
    console.log('üîß Corrigindo gerenciamento de inst√¢ncias...\n');
    
    // 1. Verificar inst√¢ncias no banco
    console.log('1Ô∏è‚É£ Verificando inst√¢ncias no banco de dados...');
    const { data: dbInstances, error: dbError } = await supabaseAdmin
      .from('whatsapp_instances')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (dbError) {
      console.error('‚ùå Erro ao buscar inst√¢ncias no banco:', dbError);
      return;
    }
    
    console.log(`üìä ${dbInstances.length} inst√¢ncias encontradas no banco`);
    
    if (dbInstances.length === 0) {
      console.log('   ‚úÖ Banco de dados limpo');
    } else {
      dbInstances.forEach((inst, index) => {
        console.log(`   ${index + 1}. ${inst.instance_name}: ${inst.status}`);
      });
    }
    
    // 2. Verificar inst√¢ncias na mem√≥ria
    console.log('\n2Ô∏è‚É£ Verificando inst√¢ncias na mem√≥ria...');
    const memoryInstances = evolutionApiService.getInstances();
    console.log(`üìä ${memoryInstances.length} inst√¢ncias na mem√≥ria`);
    
    if (memoryInstances.length === 0) {
      console.log('   ‚úÖ Mem√≥ria limpa');
    } else {
      memoryInstances.forEach((inst, index) => {
        console.log(`   ${index + 1}. ${inst.instanceName}: ${inst.status}`);
      });
    }
    
    // 3. Limpar inst√¢ncias √≥rf√£s no banco
    console.log('\n3Ô∏è‚É£ Limpando inst√¢ncias √≥rf√£s...');
    if (dbInstances.length > 0) {
      console.log('üóëÔ∏è Removendo todas as inst√¢ncias do banco...');
      
      for (const instance of dbInstances) {
        try {
          const { error: deleteError } = await supabaseAdmin
            .from('whatsapp_instances')
            .delete()
            .eq('instance_name', instance.instance_name);
          
          if (deleteError) {
            console.error(`   ‚ùå Erro ao deletar ${instance.instance_name}:`, deleteError);
          } else {
            console.log(`   ‚úÖ Deletado: ${instance.instance_name}`);
          }
        } catch (error) {
          console.error(`   ‚ùå Erro ao deletar ${instance.instance_name}:`, error.message);
        }
      }
    }
    
    // 4. Limpar dados relacionados
    console.log('\n4Ô∏è‚É£ Limpando dados relacionados...');
    
    // Limpar contatos
    const { error: contactsError } = await supabaseAdmin
      .from('whatsapp_contacts')
      .delete()
      .neq('id', 'dummy'); // Deletar todos
    
    if (contactsError) {
      console.error('‚ùå Erro ao limpar contatos:', contactsError);
    } else {
      console.log('   ‚úÖ Contatos limpos');
    }
    
    // Limpar mensagens
    const { error: messagesError } = await supabaseAdmin
      .from('whatsapp_messages')
      .delete()
      .neq('id', 'dummy'); // Deletar todos
    
    if (messagesError) {
      console.error('‚ùå Erro ao limpar mensagens:', messagesError);
    } else {
      console.log('   ‚úÖ Mensagens limpas');
    }
    
    // Limpar relacionamentos CRM
    const { error: relationshipsError } = await supabaseAdmin
      .from('whatsapp_crm_relationships')
      .delete()
      .neq('whatsapp_contact_id', 'dummy'); // Deletar todos
    
    if (relationshipsError) {
      console.error('‚ùå Erro ao limpar relacionamentos:', relationshipsError);
    } else {
      console.log('   ‚úÖ Relacionamentos limpos');
    }
    
    // 5. Verificar resultado
    console.log('\n5Ô∏è‚É£ Verificando resultado...');
    const { data: finalInstances, error: finalError } = await supabaseAdmin
      .from('whatsapp_instances')
      .select('*');
    
    if (finalError) {
      console.error('‚ùå Erro ao verificar resultado:', finalError);
    } else {
      console.log(`üìä ${finalInstances.length} inst√¢ncias restantes no banco`);
      if (finalInstances.length === 0) {
        console.log('   ‚úÖ Banco completamente limpo');
      }
    }
    
    // 6. Testar cria√ß√£o de nova inst√¢ncia
    console.log('\n6Ô∏è‚É£ Testando cria√ß√£o de nova inst√¢ncia...');
    try {
      const testInstanceName = 'test-instance-' + Date.now();
      console.log(`üìù Criando inst√¢ncia de teste: ${testInstanceName}`);
      
      // Criar inst√¢ncia no banco
      const { error: createError } = await supabaseAdmin
        .from('whatsapp_instances')
        .insert({
          instance_name: testInstanceName,
          status: 'disconnected',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });
      
      if (createError) {
        console.error('‚ùå Erro ao criar inst√¢ncia de teste:', createError);
      } else {
        console.log('   ‚úÖ Inst√¢ncia de teste criada no banco');
        
        // Deletar inst√¢ncia de teste
        const { error: deleteTestError } = await supabaseAdmin
          .from('whatsapp_instances')
          .delete()
          .eq('instance_name', testInstanceName);
        
        if (deleteTestError) {
          console.error('‚ùå Erro ao deletar inst√¢ncia de teste:', deleteTestError);
        } else {
          console.log('   ‚úÖ Inst√¢ncia de teste deletada');
        }
      }
    } catch (testError) {
      console.error('‚ùå Erro no teste de cria√ß√£o:', testError);
    }
    
    // 7. Sugest√µes finais
    console.log('\n7Ô∏è‚É£ Sugest√µes:');
    console.log('   ‚úÖ Banco de dados limpo e funcionando');
    console.log('   ‚úÖ Sistema pronto para criar novas inst√¢ncias');
    console.log('   üìù Agora voc√™ pode:');
    console.log('      1. Criar novas inst√¢ncias via frontend');
    console.log('      2. Conectar inst√¢ncias normalmente');
    console.log('      3. Deletar inst√¢ncias sem erros');
    
    console.log('\nüéâ Corre√ß√£o conclu√≠da com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro na corre√ß√£o:', error);
  }
}

// Executar corre√ß√£o
fixInstanceManagement(); 