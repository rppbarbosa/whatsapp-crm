// ===== VERIFICAR INST√ÇNCIAS NO BANCO DE DADOS =====

require('dotenv').config();
const { supabaseAdmin } = require('./src/services/supabase');

async function checkDatabaseInstances() {
  try {
    console.log('üîç Verificando inst√¢ncias no banco de dados...\n');
    
    // 1. Verificar inst√¢ncias na tabela whatsapp_instances
    console.log('1Ô∏è‚É£ Inst√¢ncias na tabela whatsapp_instances:');
    const { data: instances, error } = await supabaseAdmin
      .from('whatsapp_instances')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('‚ùå Erro ao buscar inst√¢ncias:', error);
      return;
    }
    
    console.log(`üìä ${instances.length} inst√¢ncias encontradas no banco`);
    
    if (instances.length === 0) {
      console.log('   ‚ö†Ô∏è Nenhuma inst√¢ncia no banco de dados');
    } else {
      instances.forEach((inst, index) => {
        console.log(`   ${index + 1}. ${inst.instance_name}:`);
        console.log(`      Status: ${inst.status}`);
        console.log(`      Telefone: ${inst.phone_number || 'N/A'}`);
        console.log(`      Criado em: ${inst.created_at}`);
        console.log(`      Atualizado em: ${inst.updated_at}`);
        console.log(`      QR Code: ${inst.qr_code ? 'Dispon√≠vel' : 'N√£o dispon√≠vel'}`);
        console.log('');
      });
    }
    
    // 2. Verificar se h√° inst√¢ncias √≥rf√£s (no banco mas n√£o ativas)
    console.log('2Ô∏è‚É£ Verificando inst√¢ncias √≥rf√£s...');
    const { data: orphanedInstances } = await supabaseAdmin
      .from('whatsapp_instances')
      .select('instance_name, status')
      .neq('status', 'connected');
    
    if (orphanedInstances && orphanedInstances.length > 0) {
      console.log(`üìä ${orphanedInstances.length} inst√¢ncias n√£o conectadas:`);
      orphanedInstances.forEach(inst => {
        console.log(`   - ${inst.instance_name}: ${inst.status}`);
      });
    } else {
      console.log('   ‚úÖ Todas as inst√¢ncias est√£o conectadas ou n√£o h√° inst√¢ncias');
    }
    
    // 3. Verificar contatos relacionados
    console.log('\n3Ô∏è‚É£ Verificando contatos relacionados...');
    const { data: contacts, error: contactsError } = await supabaseAdmin
      .from('whatsapp_contacts')
      .select('instance_name, count')
      .group('instance_name');
    
    if (contactsError) {
      console.error('‚ùå Erro ao buscar contatos:', contactsError);
    } else {
      console.log(`üìä Contatos por inst√¢ncia:`);
      contacts.forEach(contact => {
        console.log(`   - ${contact.instance_name}: ${contact.count} contatos`);
      });
    }
    
    // 4. Verificar mensagens relacionadas
    console.log('\n4Ô∏è‚É£ Verificando mensagens relacionadas...');
    const { data: messages, error: messagesError } = await supabaseAdmin
      .from('whatsapp_messages')
      .select('instance_name, count')
      .group('instance_name');
    
    if (messagesError) {
      console.error('‚ùå Erro ao buscar mensagens:', messagesError);
    } else {
      console.log(`üìä Mensagens por inst√¢ncia:`);
      messages.forEach(msg => {
        console.log(`   - ${msg.instance_name}: ${msg.count} mensagens`);
      });
    }
    
    // 5. Sugest√µes baseadas nos dados
    console.log('\n5Ô∏è‚É£ Sugest√µes:');
    if (instances.length === 0) {
      console.log('   üìù Crie uma nova inst√¢ncia via frontend');
    } else if (instances.every(inst => inst.status !== 'connected')) {
      console.log('   üîÑ Conecte uma inst√¢ncia existente via frontend');
      console.log('   üì± Inst√¢ncias dispon√≠veis para conex√£o:');
      instances.forEach(inst => {
        console.log(`      - ${inst.instance_name} (${inst.status})`);
      });
    } else {
      console.log('   ‚úÖ Inst√¢ncias conectadas dispon√≠veis');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar banco de dados:', error);
  }
}

// Executar verifica√ß√£o
checkDatabaseInstances(); 