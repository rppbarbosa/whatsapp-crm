require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;

if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('‚ùå Supabase n√£o configurado. Configure SUPABASE_URL e SUPABASE_ANON_KEY no .env');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function checkEmailConfig() {
  console.log('üîç VERIFICANDO CONFIGURA√á√ÉO DE EMAIL NO SUPABASE');
  console.log('==================================================');
  
  try {
    // 1. Verificar se h√° usu√°rios n√£o confirmados
    console.log('üë§ Verificando usu√°rios n√£o confirmados...');
    const { data: users, error: usersError } = await supabase
      .from('auth.users')
      .select('*')
      .eq('email_confirmed_at', null)
      .limit(5);

    if (usersError) {
      console.error('‚ùå Erro ao verificar usu√°rios:', usersError);
    } else {
      console.log('üìß Usu√°rios n√£o confirmados:', users?.length || 0);
      if (users && users.length > 0) {
        console.log('üìã Detalhes dos usu√°rios n√£o confirmados:');
        users.forEach(user => {
          console.log(`  - ${user.email} (criado em: ${user.created_at})`);
        });
      }
    }

    // 2. Verificar configura√ß√£o de autentica√ß√£o
    console.log('\nüîê Verificando configura√ß√£o de autentica√ß√£o...');
    const { data: authConfig, error: authError } = await supabase
      .rpc('get_auth_config');

    if (authError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar configura√ß√£o de auth:', authError.message);
    } else {
      console.log('‚úÖ Configura√ß√£o de auth:', authConfig);
    }

    // 3. Testar cria√ß√£o de usu√°rio
    console.log('\nüß™ Testando cria√ß√£o de usu√°rio...');
    const testEmail = `teste-${Date.now()}@exemplo.com`;
    const testPassword = '123456';
    
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          full_name: 'Usu√°rio Teste'
        }
      }
    });

    if (signUpError) {
      console.error('‚ùå Erro ao criar usu√°rio de teste:', signUpError);
    } else {
      console.log('‚úÖ Usu√°rio de teste criado:', {
        id: signUpData.user?.id,
        email: signUpData.user?.email,
        email_confirmed: signUpData.user?.email_confirmed_at ? 'Sim' : 'N√£o',
        confirmation_sent: signUpData.user?.confirmation_sent_at ? 'Sim' : 'N√£o'
      });
      
      // Limpar usu√°rio de teste
      if (signUpData.user?.id) {
        console.log('üßπ Limpando usu√°rio de teste...');
        const { error: deleteError } = await supabase.auth.admin.deleteUser(signUpData.user.id);
        if (deleteError) {
          console.log('‚ö†Ô∏è N√£o foi poss√≠vel deletar usu√°rio de teste:', deleteError.message);
        } else {
          console.log('‚úÖ Usu√°rio de teste removido');
        }
      }
    }

    // 4. Verificar se h√° configura√ß√£o de SMTP
    console.log('\nüìß Verificando configura√ß√£o de SMTP...');
    console.log('‚ÑπÔ∏è Para configurar SMTP no Supabase:');
    console.log('   1. Acesse o painel do Supabase');
    console.log('   2. V√° em Authentication > Settings');
    console.log('   3. Configure SMTP Settings');
    console.log('   4. Ou use o provedor padr√£o (limitado)');

  } catch (err) {
    console.error('‚ùå Erro inesperado:', err);
  }
}

checkEmailConfig();
