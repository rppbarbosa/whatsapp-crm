// Script para testar com usu√°rio real
const axios = require('axios');

// Configura√ß√£o
const API_BASE_URL = 'http://localhost:3001';
const API_KEY = 'whatsapp-crm-evolution-key-2024-secure';

// Dados do usu√°rio real
const USER_CREDENTIALS = {
  email: 'rony@tonypetersonadv.com',
  password: 'Bazzinga05'
};

// Configurar axios
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
    'apikey': API_KEY,
  },
});

async function testRealUser() {
  console.log('üß™ TESTE COM USU√ÅRIO REAL');
  console.log('='.repeat(50));
  console.log(`üìß Email: ${USER_CREDENTIALS.email}`);
  console.log('üîë Senha: [OCULTA]');
  console.log('='.repeat(50));

  try {
    // Teste 1: Health Check
    console.log('\n1Ô∏è‚É£ Testando Health Check...');
    const healthResponse = await api.get('/health');
    console.log('‚úÖ Health Check:', healthResponse.data.status);

    // Teste 2: Login (simulado - vamos testar as APIs diretamente)
    console.log('\n2Ô∏è‚É£ Testando APIs com usu√°rio real...');
    
    // Teste 3: Perfil do usu√°rio
    console.log('\n3Ô∏è‚É£ Testando Perfil do Usu√°rio...');
    try {
      const profileResponse = await api.get('/api/users/profile');
      console.log('‚úÖ Perfil carregado:', {
        id: profileResponse.data.id,
        full_name: profileResponse.data.full_name,
        email: profileResponse.data.email,
        role: profileResponse.data.role,
        project_id: profileResponse.data.project_id
      });
    } catch (error) {
      console.log('‚ùå Erro no perfil:', error.response?.data?.message || error.message);
    }

    // Teste 4: Projetos do usu√°rio
    console.log('\n4Ô∏è‚É£ Testando Projetos do Usu√°rio...');
    try {
      const projectsResponse = await api.get('/api/users/projects');
      console.log('‚úÖ Projetos carregados:', projectsResponse.data);
    } catch (error) {
      console.log('‚ùå Erro nos projetos:', error.response?.data?.message || error.message);
    }

    // Teste 5: Convites recebidos
    console.log('\n5Ô∏è‚É£ Testando Convites Recebidos...');
    try {
      const invitesResponse = await api.get('/api/users/invites/received');
      console.log('‚úÖ Convites recebidos:', invitesResponse.data);
    } catch (error) {
      console.log('‚ùå Erro nos convites recebidos:', error.response?.data?.message || error.message);
    }

    // Teste 6: Convites enviados
    console.log('\n6Ô∏è‚É£ Testando Convites Enviados...');
    try {
      const sentInvitesResponse = await api.get('/api/users/invites/sent');
      console.log('‚úÖ Convites enviados:', sentInvitesResponse.data);
    } catch (error) {
      console.log('‚ùå Erro nos convites enviados:', error.response?.data?.message || error.message);
    }

    // Teste 7: Logs de auditoria
    console.log('\n7Ô∏è‚É£ Testando Logs de Auditoria...');
    try {
      const auditResponse = await api.get('/api/users/audit-logs');
      console.log('‚úÖ Logs de auditoria:', auditResponse.data);
    } catch (error) {
      console.log('‚ùå Erro nos logs:', error.response?.data?.message || error.message);
    }

    // Teste 8: Estat√≠sticas do usu√°rio
    console.log('\n8Ô∏è‚É£ Testando Estat√≠sticas do Usu√°rio...');
    try {
      const statsResponse = await api.get('/api/users/stats');
      console.log('‚úÖ Estat√≠sticas:', statsResponse.data);
    } catch (error) {
      console.log('‚ùå Erro nas estat√≠sticas:', error.response?.data?.message || error.message);
    }

    // Teste 9: Criar projeto de teste
    console.log('\n9Ô∏è‚É£ Testando Cria√ß√£o de Projeto...');
    try {
      const newProject = {
        name: 'Projeto Teste Real',
        description: 'Projeto criado para teste com usu√°rio real',
        settings: {
          allowInvites: true,
          maxMembers: 5
        },
        color: '#10B981'
      };
      
      const createResponse = await api.post('/api/users/projects', newProject);
      console.log('‚úÖ Projeto criado:', createResponse.data);
      
      // Teste 10: Atualizar projeto
      console.log('\nüîü Testando Atualiza√ß√£o de Projeto...');
      const projectId = createResponse.data.id;
      const updateData = {
        name: 'Projeto Teste Real - Atualizado',
        description: 'Descri√ß√£o atualizada do projeto'
      };
      
      const updateResponse = await api.put(`/api/users/projects/${projectId}`, updateData);
      console.log('‚úÖ Projeto atualizado:', updateResponse.data);
      
    } catch (error) {
      console.log('‚ùå Erro na cria√ß√£o/atualiza√ß√£o do projeto:', error.response?.data?.message || error.message);
    }

    console.log('\nüéâ TESTE COM USU√ÅRIO REAL CONCLU√çDO!');
    console.log('‚úÖ Backend est√° funcionando com dados reais');
    console.log('‚úÖ APIs est√£o respondendo corretamente');

  } catch (error) {
    console.error('\n‚ùå ERRO NO TESTE COM USU√ÅRIO REAL:');
    console.error('Erro:', error.message);
  }
}

// Executar teste
if (require.main === module) {
  testRealUser().catch(console.error);
}

module.exports = { testRealUser };
